# **Test Cases for Saleor E-commerce Platform**

Below are structured test cases derived from the **Business Requirements Document (BRD)** for Saleor. These test cases cover **functional, non-functional, integration, and security** aspects.

---

## **1. Core E-Commerce Features Testing**
### **1.1 Product Management**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-PM-001 | Verify product creation | 1. Log in to Admin Dashboard. <br> 2. Add a new product with name, description, price, and category. | Product is saved and visible in the storefront. |
| TC-PM-002 | Test product variants (size/color) | 1. Create a product with multiple variants. <br> 2. Check in storefront. | Variants are selectable and inventory updates correctly. |
| TC-PM-003 | Digital vs. Physical product handling | 1. Upload a digital product (e.g., eBook). <br> 2. Verify download link post-purchase. | Digital product is delivered after payment. |

---

### **1.2 Checkout & Payments**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-CP-001 | Guest checkout functionality | 1. Add item to cart. <br> 2. Proceed as guest. <br> 3. Complete purchase. | Order is placed without account creation. |
| TC-CP-002 | Test Stripe integration | 1. Select Stripe at checkout. <br> 2. Enter test card details. | Payment processes successfully. |
| TC-CP-003 | Test PayPal integration | 1. Select PayPal. <br> 2. Complete Sandbox transaction. | Payment confirmation appears. |

---

### **1.3 Order Management**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-OM-001 | Order status updates | 1. Place an order. <br> 2. Update status in Admin (e.g., "Shipped"). | Customer receives status email. |
| TC-OM-002 | Test refund processing | 1. Initiate refund in Admin. <br> 2. Verify Stripe/PayPal reversal. | Refund reflects in customer’s account. |

---

### **1.4 User Accounts**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-UA-001 | User registration | 1. Sign up with email & password. | Account is created; confirmation email sent. |
| TC-UA-002 | Wishlist functionality | 1. Log in. <br> 2. Add item to wishlist. | Item persists across sessions. |

---

### **1.5 Search & Filters**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-SF-001 | Search by keyword | 1. Enter search term (e.g., "T-shirt"). | Relevant products appear. |
| TC-SF-002 | Filter by price range | 1. Set min/max price sliders. | Only matching products display. |

---

## **2. Admin Dashboard Testing**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-AD-001 | Real-time analytics load | 1. Generate test orders. <br> 2. Check dashboard. | Sales data updates in real time. |
| TC-AD-002 | Discount code creation | 1. Create a 10% discount. <br> 2. Apply at checkout. | Discount is applied correctly. |

---

## **3. Integration Testing**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-IT-001 | FedEx shipping rates | 1. Set up FedEx API. <br> 2. Calculate shipping. | Correct rates display at checkout. |
| TC-IT-002 | Google Analytics tracking | 1. Browse storefront. <br> 2. Check GA dashboard. | Pageviews are recorded. |

---

## **4. Non-Functional Testing**
### **4.1 Performance**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-PF-001 | API response time | 1. Load test with 100+ concurrent users. | All requests complete in <500ms. |
| TC-PF-002 | Product page load time | 1. Measure page load. | <2s on average. |

### **4.2 Security**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-SC-001 | PCI-DSS compliance check | 1. Scan checkout process. | No sensitive data stored improperly. |
| TC-SC-002 | SQL injection test | 1. Inject test payloads in search. | System rejects malicious input. |

### **4.3 Scalability**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-SC-003 | Kubernetes auto-scaling | 1. Simulate traffic spike. | New pods spawn automatically. |

---

## **5. End-to-End (E2E) Flow**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-E2E-001 | Full purchase cycle | 1. Register → Add item → Checkout → Pay → Receive order. | Order completes successfully. |

---

## **6. Success Metrics Validation**
| **Test Case ID** | **Description** | **Steps** | **Expected Result** |
|------------------|----------------|-----------|---------------------|
| TC-SM-001 | Checkout abandonment rate | 1. Track incomplete checkouts. | Rate decreases post-optimization. |

---

### **Notes:**
- **Test Data**: Use mock products/orders for repeatability.  
- **Automation**: API tests (Postman/Newman), UI tests (Cypress/Selenium).  
- **Defect Reporting**: Log issues in Jira/GitHub with severity (Critical/Major/Minor).  

This test suite ensures **Saleor** meets all BRD requirements before deployment. Adjust based on actual implementation details.  
